(function(){"use strict";const g=async(n,s,e,t,o)=>{const a=new OffscreenCanvas(t,o),c=a.getContext("2d");if(!c)throw new Error("Canvas 2D context unavailable");return c.drawImage(n,s,e,t,o,0,0,t,o),a.convertToBlob({type:"image/png"})},p=async(n,s)=>{const e=await createImageBitmap(n),t=Math.min(s/e.width,s/e.height,1),o=Math.max(1,Math.round(e.width*t)),a=Math.max(1,Math.round(e.height*t)),c=new OffscreenCanvas(o,a),i=c.getContext("2d");if(!i)throw new Error("Canvas 2D context unavailable");return i.imageSmoothingEnabled=!0,i.drawImage(e,0,0,o,a),e.close(),c.convertToBlob({type:"image/png"})},d=async n=>{const{grid:s,image:e,tileSize:t,puzzleId:o,thumbnailSize:a}=n,c=s.rows*s.cols,i=[];for(let r=0;r<s.rows;r+=1)for(let l=0;l<s.cols;l+=1){const m=`${o}-${r}-${l}`,u=Math.round(l*t.width),b=Math.round(r*t.height),h=await g(e,u,b,t.width,t.height),f=await p(h,a);i.push({id:m,row:r,col:l,blob:h,thumbnail:f,width:t.width,height:t.height});const v={type:"split-progress",processed:i.length,total:c};self.postMessage(v)}e.close();const w={type:"split-result",puzzleId:o,pieces:i};self.postMessage(w)};self.onmessage=n=>{const{data:s}=n;s.type==="split"&&d(s).catch(e=>{console.error("Split worker failed",e);const t={type:"split-error",message:e.message};self.postMessage(t)})}})();
